{"version":3,"sources":["models/TrainingModel.js","components/TrainingItem.js","components/TrainingsList.js","components/TrainingAddForm.js","components/Trainings.js","App.js","index.js"],"names":["TrainingModel","id","date","distance","this","StepsItem","props","item","onRemove","onModify","className","onClick","StepsTable","items","handleRemove","handleModify","sort","a","b","moment","unix","map","StepsForm","useState","dateErr","distanceErr","error","setError","form","onChange","onSubmit","handleBlur","isValid","prevError","evt","htmlFor","name","type","value","onBlur","Steps","trainingList","setList","setForm","event","preventDefault","some","format","newArr","prevList","nanoid","prevForm","target","length","filter","modifyElement","find","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ce17de02.chunk.js","sourcesContent":["export default class TrainingModel {\n  constructor(id, date, distance) {\n    this.id = id;\n    this.date = date;\n    this.distance = distance;\n  }\n}","import React from \"react\";\n\nexport default function StepsItem(props) {\n  const { item, onRemove, onModify } = props;\n  \n  return (\n    <tr>\n      <td>{item.date}</td>\n      <td>{item.distance}</td>\n      <td>\n        <span className=\"material-icons\" onClick={() => onModify(item.id)}>\n          create\n        </span>\n        <span className=\"material-icons\" onClick={() => onRemove(item.id)}>\n          delete_forever\n        </span>\n      </td>\n    </tr>\n  );\n}","import React from 'react';\nimport TrainingItem from './TrainingItem';\nimport moment from 'moment';\n\nexport default function StepsTable(props) {\n  const { items, onRemove: handleRemove, onModify: handleModify } = props;\n  \n  return (\n    <table className=\"Steps-table\">\n        <thead className=\"table-head\">\n          <tr>\n            <td>Дата (ДД.ММ.ГГГГ)</td>\n            <td>Пройдено, км</td>\n            <td>Действия</td>\n          </tr>\n        </thead>\n        <tbody className=\"table-body\">\n          {items\n            .sort((a, b) => moment(b.date, [\"DD.MM.YYYY\", \"DD-MM-YYYY\", \"D.MM.YYYY\"]).unix() - moment(a.date, [\"DD.MM.YYYY\", \"DD-MM-YYYY\", \"D.MM.YYYY\"]).unix())\n            .map(item => <TrainingItem key={item.id} item={item} onRemove={handleRemove} onModify={handleModify}/>)\n          }\n        </tbody>\n      </table>\n  )\n}","import React, { useState } from \"react\";\nimport moment from 'moment';\n\nexport default function StepsForm(props) {\n  const [error, setError] = useState({dateErr: false, distanceErr: false});\n  const { form, onChange, onSubmit } = props;\n\n  const handleBlur = () => {\n    setError({dateErr: false, distanceErr: false});\n\n    if (!moment(form.date, [\"DD.MM.YYYY\", \"DD-MM-YYYY\", \"D.MM.YYYY\"], true).isValid()) {\n      setError(prevError => ({...prevError, dateErr: true}))\n    }\n    \n    if (!form.distance || form.distance <= 0) {\n      setError(prevError => ({...prevError, distanceErr: true}))\n    }\n  }\n\n  return (\n    <form className=\"Steps-form\" onSubmit={(evt) => onSubmit(evt)}>\n      <div className=\"Steps-fields\">\n        <label htmlFor=\"date\">Дата (ДД.ММ.ГГГГ)</label>\n        <input id=\"date\" name=\"date\" type=\"text\" value={form.date} onChange={(evt) => onChange(evt)} onBlur={handleBlur}/>\n        {error.dateErr && <span className=\"error\">Укажите дату</span>}\n      </div>\n      <div className=\"Steps-fields\">\n        <label htmlFor=\"distance\">Пройдено, км</label>\n        <input id=\"distance\" name=\"distance\" type=\"number\" value={form.distance} onChange={(evt) => onChange(evt)} onBlur={handleBlur}/>\n        {error.distanceErr && <span className=\"error\">Укажите расстояние</span>}\n      </div>\n      <button className=\"Steps-button\" type=\"submit\">Ok</button>\n    </form>\n  );\n}","import { nanoid } from \"nanoid\";\nimport React, { useState } from \"react\";\nimport TrainingModel from \"../models/TrainingModel\";\nimport TrainingsList from \"./TrainingsList\";\nimport moment from 'moment';\nimport TrainingAddForm from \"./TrainingAddForm\";\n\nexport default function Steps() {\n  const [trainingList, setList] = useState([]);\n  const [form, setForm] = useState({date: '', distance: '', id: ''});\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (moment(form.date, [\"DD.MM.YYYY\", \"DD-MM-YYYY\", \"D.MM.YYYY\"], true).isValid() && form.distance > 0) {\n      if (trainingList.some(item => item.id === form.id)) {\n        setList(trainingList.map(item => {\n          if (item.id === form.id) {\n            return {\n              ...item,\n              date: form.date,\n              distance: form.distance\n            }\n          }\n          return item;\n        }))\n      } else if (trainingList.some(item => item.date === moment(form.date,\"DD-MM-YYYY\").format(\"DD-MM-YYYY\"))) {\n        const newArr = trainingList.map(item => {\n          if (item.date === moment(form.date,\"DD-MM-YYYY\").format(\"DD-MM-YYYY\")) {\n            return {\n              ...item,\n              distance: +item.distance + +form.distance\n            }\n          }\n          return item;\n        });\n        setList(newArr);\n      } else {\n        setList(prevList => ([...prevList, new TrainingModel(nanoid(), moment(form.date,\"DD-MM-YYYY\").format(\"DD-MM-YYYY\"), form.distance)]));\n      }\n      \n      setForm(prevForm => ({prevForm, date: '', distance: '', id: ''}));\n    }\n  }\n\n  const handleChange = evt => {\n    const {name, value} = evt.target;\n    setForm(prevForm => ({...prevForm, [name]: value}));\n  }\n\n  const handleRemove = id => {\n    setList(trainingList.filter(item => item.id !== id));\n  }\n\n  const handleModify = id => {\n    const modifyElement = trainingList.find(item => item.id === id);\n    setForm({date: modifyElement.date, distance: modifyElement.distance, id: modifyElement.id});\n  }\n\n  return (\n    <div className=\"Steps\">\n      <TrainingAddForm\n        form={form} \n        onSubmit={handleSubmit} \n        onChange={handleChange}\n      />\n      {trainingList.length\n        ? \n        <TrainingsList \n          items={trainingList} \n          onRemove={handleRemove} \n          onModify={handleModify}/>\n        : \n        <span>Нет данных</span>\n      }\n    </div>\n  );\n}","import './App.css';\nimport React from 'react';\nimport Trainings from './components/Trainings';\n\nexport default function App() {\n  return (\n    <>\n      <Trainings />\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}